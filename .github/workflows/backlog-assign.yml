################################################################################
# Team Issue Routing Workflow
#
# Automatically routes issues to team-specific projects when team labels are added
#
# SETUP INSTRUCTIONS:
# 
# 1. CREATE TEAM LABEL:
#    - Format: 'team-<shortcode>' (e.g. 'team-abc')
#    - Create in GitHub: 
#      Settings → Labels → New label
#
# 2. CREATE PROJECT :
#
# 3. UPDATE PROJECT MAPPING:
#    - Edit the TEAM_PROJECT_MAP in the script below
#    - Format: 'shortcode': 'project_url'
#    - Example for 'team-xyz':
#      'xyz': 'https://github.com/orgs/my-org/projects/4'
#
# UNMAPPED TEAMS:
# - Issues get 'triage' label
# - Add missing mappings to TEAM_PROJECT_MAP
#
################################################################################
name: Assign Issues to Team Projects

on:
  issues:
    types: [labeled]

jobs:
  assign-to-project:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      repository-projects: write

    steps:
      - name: Handle Team Label
        uses: actions/github-script@v6
        with:
          script: |
            // Configuration - Edit these values
            const TEAM_PROJECT_MAP = {
                "abc": "https://github.com/orgs/lucas75-labs/projects/1",
                "cde": "https://github.com/orgs/lucas75-labs/projects/2",
                "efg": "https://github.com/orgs/lucas75-labs/projects/3"
            };

            const { label, issue } = context.payload;

            if (!label.name.startsWith('team-')) return;
            
            const teamKey = label.name.split('team-')[1];
            const projectUrl = TEAM_PROJECT_MAP[teamKey];

            if (!projectUrl) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['triage']
              });
              return;
            }

            // Parse project URL
            const urlMatch = projectUrl.match(
              /github\.com\/(orgs|users)\/([^\/]+)\/projects\/(\d+)/
            );

            if (!urlMatch) {
              core.error(`Invalid project URL: ${projectUrl}`);
              return;
            }

            const [_, type, owner, projectNumber] = urlMatch;

            // Get project ID
            const query = type === 'orgs' ? 
              `query($owner: String!, $number: Int!) {
                organization(login: $owner) {
                  projectV2(number: $number) { id }
                }
              }` : 
              `query($owner: String!, $number: Int!) {
                user(login: $owner) {
                  projectV2(number: $number) { id }
                }
              }`;

            const response = await github.graphql(query, {
              owner,
              number: parseInt(projectNumber)
            });

            const projectId = type === 'orgs' ? 
              response.organization.projectV2?.id : 
              response.user.projectV2?.id;

            if (!projectId) {
              core.error(`Project not found: ${projectUrl}`);
              return;
            }

            // Add issue to project
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $itemId}) {
                  item {
                    id
                  }
                }
              }
            `, { projectId, itemId: issue.node_id });

            core.notice(`Added issue to project: ${projectUrl}`);